
import camion.*
import cosas.*

describe "camion" {

    test "cargar " {
        const camion = new Camion(tara = 1000, cosas =#{})

        camion.cargar(paqueteDeLadrillos)
        assert.equals([paqueteDeLadrillos], camion.cosas())
    }

    test "descargar " {
        const camion = new Camion(tara = 1000, cosas =#{})

        camion.cargar(paqueteDeLadrillos)
        camion.cargar(knightRider)
        camion.descargar(paqueteDeLadrillos)
        assert.equals([knightRider], camion.cosas())
    }

    test "todoPesoPar " {
        const camion = new Camion(tara = 1000, cosas =#{})

        camion.cargar(paqueteDeLadrillos)
        camion.cargar(knightRider)
        assert.that(camion.todoPesoPar())
    }
    
    test "hayAlgunoQuePesa(peso) " {
        const camion = new Camion(tara = 1000, cosas =#{})

        camion.cargar(knightRider)
        camion.cargar(residuosRadioactivos)
        assert.that(camion.hayAlgunoQuePesa(500))
    }

    test "elDeNivel(nivel) " {  
        const camion = new Camion(tara = 1000, cosas =#{})

        camion.cargar(knightRider)
        camion.cargar(paqueteDeLadrillos)
        assert.equals(paqueteDeLadrillos, camion.elDeNivel(2))
    }

    test "pesoTotal() " {
        const camion = new Camion(tara = 1000, cosas =#{})

        camion.cargar(knightRider)
        camion.cargar(bumblebee)
        assert.equals(2300, camion.pesoTotal())
    }

    test "excedidoDePeso() " {
        const camion = new Camion(tara = 1000, cosas =#{})

        camion.cargar(knightRider)
        camion.cargar(bateriaAntiaerea)
        camion.cargar(residuosRadioactivos)
        camion.cargar(bumblebee)
        assert.that(camion.excedidoDePeso())
    }

    test "objetosQueSuperanPeligrosidad(nivel) " {
        const camion = new Camion(tara = 1000, cosas =#{})

        camion.cargar(paqueteDeLadrillos)
        camion.cargar(knightRider)
        assert.equals([knightRider], camion.objetosQueSuperanPeligrosidad(2))
    }

    test "objetosMasPeligrososQue(cosa) " {
        const camion = new Camion(tara = 1000, cosas =#{})

        camion.cargar(paqueteDeLadrillos)
        camion.cargar(knightRider)
        assert.equals([knightRider], camion.objetosMasPeligrososQue(paqueteDeLadrillos))
    }

    test "puedeCircularEnRuta(nivelMaximoPeligrosidad) " {
        const camion = new Camion(tara = 1000, cosas =#{})

        camion.cargar(knightRider)
        camion.cargar(paqueteDeLadrillos)
        camion.cargar(residuosRadioactivos)
        assert.that(camion.puedeCircularEnRuta(200))
    }

    test "tieneAlgoQuePesaEntre(min, max) " {
        const camion = new Camion(tara = 1000, cosas =#{})

        camion.cargar(knightRider)
        camion.cargar(paqueteDeLadrillos)
        camion.cargar(residuosRadioactivos)
        assert.that(camion.tieneAlgoQuePesaEntre(500, 600)) 
    }

    test "cosaMasPesada() " {
        const camion = new Camion(tara = 1000, cosas =#{})

        camion.cargar(paqueteDeLadrillos)
        camion.cargar(knightRider)
        assert.equals(knightRider, camion.cosaMasPesada())
    }

    test "pesos() " {
        const camion = new Camion(tara = 1000, cosas =#{})

        camion.cargar(bateriaAntiaerea)
        camion.cargar(knightRider)
        assert.equals( [300, 500], camion.pesos())
    }

    test "totalBultos() " {
        const camion = new Camion(tara = 1000, cosas =#{})

        camion.cargar(bateriaAntiaerea)
        camion.cargar(knightRider)
        assert.equals( 3, camion.totalBultos())
    }
}
describe "efectos de carga" {
    const camion = new Camion(tara = 1000, cosas =#{})

    test "Bumblebee pasa a robot" {
        camion.cargar(bumblebee)

        assert.equals(robot, bumblebee.estado())
    }
    test "más 12 ladrillos" {
        camion.cargar(paqueteDeLadrillos)

        assert.equals( 24, paqueteDeLadrillos.peso() )
    }
    test "arena a granel: agrega 20 kilos" {
        camion.cargar(arenaAGranel)

        assert.equals( 20, arenaAGranel.peso())
    }
    test "batería antiaérea: carga misiles" {
        assert.equals(200, bateriaAntiaerea.peso())
        camion.cargar(bateriaAntiaerea)

        assert.equals(300, bateriaAntiaerea.peso())
    }
    test "contenedorPortuario agregarCosa(cosa)"{
        contenedorPortuario.cargar(arenaAGranel)
        assert.equals( 100, contenedorPortuario.peso())
    }
    test "contenedor portuario: hace que reaccione cada una de las cosas que tiene adentro" {
        
        contenedorPortuario.cargar(arenaAGranel)
        camion.cargar(contenedorPortuario)

        assert.equals( 120, contenedorPortuario.peso())
    }

    test "residuos radioactivos: agrega 15 kilos"{
        assert.equals( 0, residuosRadioactivos.peso())
        camion.cargar(residuosRadioactivos)
        assert.equals( 15, residuosRadioactivos.peso())
    }
}

describe "Transporte" {
    test "ruta9 permiteCircular(camion)"{
        const camion = new Camion(tara = 1000, cosas =#{})

        camion.cargar(knightRider)
        assert.that( ruta9.permiteCircular(camion))
    }
    test "caminosVecinales permiteCircular(camion)"{
        const camion = new Camion(tara = 1000, cosas =#{})

        camion.cargar(knightRider)
        assert.that(caminosVecinales.permiteCircular(camion))
    }
    test "almacen"{
        assert.that(almacen.cosasAlmacenadas.isEmpty())
        almacen.almacenar([knightRider])
        assert.that(almacen.cantidadDeBultosDisponible == 2)
    }
    test "transporta (destino, camino)"{
        const camion = new Camion(tara = 1000, cosas =#{})

        camion.cargar(bumblebee)
        camion.transportar(almacen, ruta9)
        assert.equals([bumblebee], almacen.cosasAlmacenadas())
}
    test "como queda el camion despues del clear"{
        const camion = new Camion(tara = 1000, cosas =#{})
        
        camion.cargar(knightRider)
        camion.transportar(almacen, ruta9)
        assert.equals([], camion.cosas())
}
}   